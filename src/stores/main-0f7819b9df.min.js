function keyCheck(t) {
    if ("" != t && 72 == t.length) {
        var i = "https://api.guildwars2.com/v2/tokeninfo?access_token=" + t;
        $("#loader").addClass("visible"), $("body").addClass("loading"), $("#keySubmit").addClass("shift").attr("disabled", "disabled"), error = !1, $("body > h2, body > aside").removeClass("visible"), $("section").removeClass("visible").removeClass("loading"), $("#mainNav a").removeClass("selected"), setTimeout(function() { $.ajax({ url: i, type: "GET", dataType: "json", cache: !0, timeout: 1e4, success: function(i) { i.id ? (key = t, $("#apiKey").val() != key && $("#apiKey").val(key), createCookie("apiKey", key, 365), getAccount(t)) : (createCookie("apiKey", "", -1), $("#apiKey").removeClass("success").addClass("error")) }, error: function() { createCookie("apiKey", "", -1), $("#apiKey").removeClass("success").addClass("error"), error = !0 } }) }, 400)
    }
}

function getAccount(t) {
    var i = "https://api.guildwars2.com/v2/account?access_token=" + t;
    $.ajax({
        url: i,
        type: "GET",
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            if (t.name)
                if ($("#showMenu").addClass("visible"), accountName = t.name, $("#accountName").html('<i class="material-icons">account_circle</i> ' + accountName), getWorld(t.world), guilds = t.guilds, "" != getCookie("startTab")) {
                    var i = getCookie("startTab");
                    $('#mainNav a[data-id="' + i + '"]').trigger("click")
                } else $("#mainNav a[data-id]:first").trigger("click");
            else createCookie("apiKey", "", -1), $("#apiKey").removeClass("success").addClass("error")
        },
        error: function() { error = !0 }
    })
}

function getWorld(t) {
    var i = "https://api.guildwars2.com/v2/worlds?lang=fr&ids=" + t;
    $.ajax({ type: "GET", url: i, dataType: "json", cache: !0, timeout: 1e4, success: function(i) { worldName = i[0].name, $("#worldName").html('<i class="material-icons world">public</i> ' + worldName), $("#worldName").attr("href", "http://wvwintel.com/#" + t), $("body > h2, body > aside").addClass("visible") }, error: function() {} })
}

function getGuilds(t) { $.each(t, function() { getGuild(this) }) }

function getGuild(t) {
    var i = "https://api.guildwars2.com/v1/guild_details.json?guild_id=" + t;
    $.ajax({ type: "GET", url: i, dataType: "json", cache: !0, timeout: 1e4, success: function(i) { $("#guilds > div").append('<div data-guildid="' + t + '"><a href="https://guilds.gw2w2w.com/guilds/' + i.guild_name.split(" ").join("-") + '" target="_blank"><strong>' + i.guild_name + " [" + i.tag + ']</strong><br><img src="https://guilds.gw2w2w.com/guilds/' + i.guild_name.split(" ").join("-") + '/128.svg"></a></div>') }, error: function() {} })
}

function getCharGuild(t, i) {
    var s = "https://api.guildwars2.com/v1/guild_details.json?guild_id=" + t;
    $.ajax({ type: "GET", url: s, dataType: "json", cache: !0, timeout: 1e4, success: function(t) { $("#" + i + " .guild").html('<a href="https://guilds.gw2w2w.com/guilds/' + t.guild_name.split(" ").join("-") + '" target="_blank">' + t.guild_name + " [" + t.tag + ']<br><img src="https://guilds.gw2w2w.com/guilds/' + t.guild_name.split(" ").join("-") + '/128.svg"></a>') }, error: function() {} })
}

function getCharacters() {
    var t = "https://api.guildwars2.com/v2/characters?page=0&page_size=200&access_token=" + key;
    $.ajax({
        type: "GET",
        url: t,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t, i, s) {
            if (t.text) $("#characters > div.char-details").html("<p class='error'>Characters API key permission required.</p>"), $("#characters > div.char-list-wrap").hide();
            else {
                $("#characters > div.char-list-wrap").show();
                var a = "",
                    e = "",
                    n = [],
                    r = [];
                if ($.each(t, function() {
                        var t = [],
                            i = [],
                            s = $("#itemLinks").val(),
                            o = this.name.split(" ").join(""),
                            d = Math.round(this.age / 3600);
                        a += '<option value="' + o + '" data-level="' + this.level + '">' + this.name + " (" + this.level + ")</option>";
                        var c = '<div id="' + o + '">';
                        c += '<div class="details">', c += '<div class="flex-container">', c += '<div class="char-info"><h5>Info:</h5>', c += '<img src="assets/img/' + this.profession + '.png"> Level ' + this.level + " " + this.profession, c += '<br><img src="assets/img/' + this.race + '.png"> ' + this.race + " " + this.gender, c += '<br><i class="material-icons">cake</i> Birthday: ' + formatDate(this.created), c += '<br><i class="material-icons">schedule</i> ' + d + " hours played", c += '<br><i class="material-icons">sentiment_very_dissatisfied</i> ' + this.deaths + " deaths", c += "</div>", this.crafting.length && (c += '<div class="crafting"><h5>Crafting:</h5>', $.each(this.crafting, function() {
                            var t = "";
                            0 == this.active && (t = "inactive"), c += '<span class="' + t + '"><img src="assets/img/' + this.discipline + '.png"> ' + this.discipline + " (" + this.rating + ")</span>"
                        }), c += "</div>"), this.guild && (c += "<div><h5>Guild:</h5>", c += '<span class="guild"></span>', getCharGuild(this.guild, o), c += "</div>"), c += "</div>", c += "</div>", c += '<div class="subtabs">', c += "<nav>", c += '<a href="#" data-class="equipment" class="selected">Equipment</a>', c += '<a href="#" data-class="inventory">Inventory</a>', c += '<a href="#" data-class="specializations">Specializations</a>', c += "</nav>", this.equipment ? (c += '<div class="equipment visible flex-container">', $.each(this.equipment, function() {
                            var a = "";
                            this.skin && (a = " data-skin=" + this.skin, -1 == $.inArray(this.skin, i) && i.push(this.skin));
                            var e = "";
                            if (this.upgrades) {
                                var n = 1;
                                $.each(this.upgrades, function() { e += " data-upgrade" + n + '="' + this + '"', n++, -1 == $.inArray(this, t) && t.push(this) })
                            }
                            var r = "";
                            if (this.infusions) {
                                var n = 1;
                                $.each(this.infusions, function() { r += " data-infusion" + n + '="' + this + '"', n++, -1 == $.inArray(this, t) && t.push(this) })
                            }
                            c += '<div class="' + this.slot + '">' + this.slot + "<br>", c += '<a href="' + s + this.id + '" class="item value-exclude" data-itemid="' + this.id + '"' + a + e + r + ' target="_blank">', c += '<img src="assets/img/gw2-logo.png">', c += "</a>", this.upgrades && $.each(this.upgrades, function() { c += '<a href="' + s + this + '" class="item small" data-itemid="' + this + '" target="_blank">', c += '<img src="assets/img/gw2-logo.png">', c += "</a>" }), this.infusions && $.each(this.infusions, function() { c += '<a href="' + s + this + '" class="item small" data-itemid="' + this + '" target="_blank">', c += '<img src="assets/img/gw2-logo.png">', c += "</a>" }), c += "</div>", -1 == $.inArray(this.id, t) && t.push(this.id)
                        }), c += "</div>", c += '<div class="inventory collapsed">', this.bags && $.each(this.bags, function() {
                            c += '<div class="bag">', c += '<div class="item" data-itemid="' + this.id + '"><a href="' + s + this.id + '" target="_blank"><img src="assets/social/gw2-logo.png"></a> <strong class="item-name"></strong></div>', -1 == $.inArray(this.id, t) && t.push(this.id), this.inventory && $.each(this.inventory, function() {
                                if (this.id) {
                                    var a = "";
                                    this.skin && (a = " data-skin=" + this.skin, -1 == $.inArray(this.skin, i) && i.push(this.skin));
                                    var e = "";
                                    if (this.upgrades) {
                                        var n = 1;
                                        $.each(this.upgrades, function() { e += " data-upgrade" + n + '="' + this + '"', n++, -1 == $.inArray(this, t) && t.push(this) })
                                    }
                                    var r = "";
                                    if (this.infusions) {
                                        var n = 1;
                                        $.each(this.infusions, function() { r += " data-infusion" + n + '="' + this + '"', n++, -1 == $.inArray(this, t) && t.push(this) })
                                    }
                                    var o = "";
                                    !this.binding || "Character" != this.binding && "Account" != this.binding || (o = "value-exclude"), c += '<a href="' + s + this.id + '" class="item ' + o + '" data-itemid="' + this.id + '"' + a + e + r + ' data-quantity="' + this.count + '" target="_blank">', c += '<img src="assets/img/gw2-logo.png">', this.count > 1 && (c += "<span>" + this.count + "</span>"), c += "</a>", -1 == $.inArray(this.id, t) && t.push(this.id)
                                } else c += '<div class="item empty"></div>'
                            }), c += "</div>"
                        }), c += "</div>") : c += '<div class="equipment visible"><p class="error">Inventories or Builds API permission required.</p></div><div class="inventory collapsed"><p class="error">Inventories API permission required.</p></div>', this.specializations ? (c += '<div class="specializations collapsed">', c += '<div class="subtabs">', c += "<nav>", c += '<a href="#" data-class="pve" class="selected">PvE</a>', c += '<a href="#" data-class="wvw">WvW</a>', c += '<a href="#" data-class="pvp">PvP</a>', c += "</nav>", c += '<div class="pve visible">', $.each(this.specializations.pve, function() { parseInt(this.id) && (e += this.id + ",", c += '<div class="specialization" data-specid="' + this.id + '" data-trait1="' + this.traits[0] + '" data-trait2="' + this.traits[1] + '" data-trait3="' + this.traits[2] + '"></div>') }), c += '<div class="build-skills"><h4>Skills</h4>', Number.isInteger(this.skills.pve.heal) && (c += '<div class="build-skill" data-skill-id="' + this.skills.pve.heal + '"><img src=""></div>', n.push(this.skills.pve.heal)), $.each(this.skills.pve.utilities, function() { parseInt(this) && (c += '<div href="#" class="build-skill" data-skill-id="' + this + '"><img src=""></div>', n.push(this)) }), Number.isInteger(this.skills.pve.elite) && (c += '<div href="#" class="build-skill" data-skill-id="' + this.skills.pve.elite + '"><img src=""></div>', n.push(this.skills.pve.elite)), c += "</div>", c += "</div>", c += '<div class="wvw collapsed">', $.each(this.specializations.wvw, function() { parseInt(this.id) && (e += this.id + ",", c += '<div class="specialization" data-specid="' + this.id + '" data-trait1="' + this.traits[0] + '" data-trait2="' + this.traits[1] + '" data-trait3="' + this.traits[2] + '"></div>') }), c += '<div class="build-skills"><h4>Skills</h4>', Number.isInteger(this.skills.wvw.heal) && (c += '<div href="#" class="build-skill" data-skill-id="' + this.skills.wvw.heal + '"><img src=""></div>', n.push(this.skills.wvw.heal)), $.each(this.skills.wvw.utilities, function() { parseInt(this) && (c += '<div href="#" class="build-skill" data-skill-id="' + this + '"><img src=""></div>', n.push(this)) }), Number.isInteger(this.skills.wvw.elite) && (c += '<div href="#" class="build-skill" data-skill-id="' + this.skills.wvw.elite + '"><img src=""></div>', n.push(this.skills.wvw.elite)), c += "</div>", c += "</div>", c += '<div class="pvp collapsed">', $.each(this.specializations.pvp, function() { parseInt(this.id) && (e += this.id + ",", c += '<div class="specialization" data-specid="' + this.id + '" data-trait1="' + this.traits[0] + '" data-trait2="' + this.traits[1] + '" data-trait3="' + this.traits[2] + '"></div>') }), c += '<div class="build-skills"><h4>Skills</h4>', Number.isInteger(this.skills.pvp.heal) && (c += '<div href="#" class="build-skill" data-skill-id="' + this.skills.pvp.heal + '"><img src=""></div>', n.push(this.skills.pvp.heal)), $.each(this.skills.pvp.utilities, function() { parseInt(this) && (c += '<div href="#" class="build-skill" data-skill-id="' + this + '"><img src=""></div>', n.push(this)) }), Number.isInteger(this.skills.pvp.elite) && (c += '<div href="#" class="build-skill" data-skill-id="' + this.skills.pvp.elite + '"><img src=""></div>', n.push(this.skills.pvp.elite)), c += "</div>", c += '<div class="pvp-equip"><h4>Equipment</h4>', 0 != this.equipment_pvp.amulet && (c += '<a href="#" class="item" data-itemid="' + this.equipment_pvp.amulet + '"><img src=""></a>', r.push(this.equipment_pvp.amulet)), 0 != this.equipment_pvp.rune && (c += '<a href="#" class="item" data-itemid="' + this.equipment_pvp.rune + '"><img src=""></a>', t.push(this.equipment_pvp.rune)), $.each(this.equipment_pvp.sigils, function() { parseInt(this) && (c += '<a href="#" class="item" data-itemid="' + this + '"><img src=""></a>', t.push(this)) }), c += "</div>", c += "</div>", c += "</div>", c += "</div>") : c += '<div class="specializations collapsed"><p class="error">Builds API permission required.</p></div>', c += "</div>", c += "</div>", $("#characters div.char-details").append(c)
                    }), $("#charList").append(a), sortCharacters(), sortCrafting(), $(".equipment > div").length && sortEquipment(), $(".specializations > div").length && getSpecializations(e), getSkills(n), getAmulets(r), "" != getCookie("startChar")) {
                    var o = getCookie("startChar");
                    if ($('#charList option[value="' + o + '"]').length) $("#charList").val(o).trigger("change");
                    else {
                        var o = $("#charList option:first").attr("value");
                        $("#charList").val(o).trigger("change")
                    }
                } else {
                    var o = $("#charList option:first").attr("value");
                    $("#charList").val(o).trigger("change")
                }
            }
        },
        error: function() { $("#characters > div.char-details").html("<p class='error'>Characters API key permission required.</p>"), $("#characters > div.char-list-wrap").hide() }
    })
}

function getSkills(t) {
    var i = t.join(",");
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/skills?ids=" + i,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            var a = 0;
            $.each(t, function() {
                var t = $('.build-skills .build-skill[data-skill-id="' + this.id + '"]');
                t.find("img").attr("data-src", this.icon);
                var i = "",
                    s = "";
                i += '<div class="flex-container">', s += '<div class="skill-details">', s += '<div class="skill-name">', this.icon && (this.prefix && (i += '<div class="icon"><img data-src="' + this.prefix.icon + '"></div>'), i += '<div class="icon"><img data-src="' + this.icon + '">', this.apply_count && this.apply_count > 1 && (i += '<span class="intensity">' + this.apply_count + "</span>"), i += "</div>", s += '<img data-src="' + this.icon + '"> '), i += this.name, s += this.name, s += "</div>", s += '<div class="description">' + this.description + "</div>", this.facts && $.each(this.facts, function() { s += '<div class="flex-container">', this.icon && "Recharge" != this.type && (this.prefix && (s += '<div class="icon"><img data-src="' + this.prefix.icon + '"></div>'), s += '<div class="icon"><img data-src="' + this.icon + '">', this.apply_count && this.apply_count > 1 && (s += '<span class="intensity">' + this.apply_count + "</span>"), s += "</div>"), "AttributeAdjust" == this.type ? this.text ? s += this.text + ": +" + this.value : s += this.target + ": +" + this.value : "Buff" == this.type ? this.duration ? s += '<div class="details">' + this.status + " (" + this.duration + "s): " + this.description + "</div>" : 0 == this.duration ? s += '<div class="details">' + this.status + ": " + this.description + "</div>" : s += '<div class="details">Removes ' + this.status + "</div>" : "BuffConversion" == this.type ? s += '<div class="details">Gain ' + this.target + " Based on a Percentage of " + this.source + ": " + this.percent + "%</div>" : "ComboField" == this.type ? s += this.text + ": " + this.field_type : "ComboFinisher" == this.type ? s += this.text + ": " + this.finisher_type + " (" + this.percent + "%)" : "Damage" == this.type ? s += '<div class="details">' + this.text + ": " + this.hit_count + " hit(s)</div>" : "Distance" == this.type || "Radius" == this.type ? s += this.text + ": " + this.distance : "NoData" == this.type || "Unblockable" == this.type ? s += this.text : "Number" == this.type || "Range" == this.type ? s += this.text + ": " + this.value : "Percent" == this.type ? s += this.text + ": " + this.percent + "%" : "PrefixedBuff" == this.type ? s += '<div class="details short">' + this.status + " (" + this.duration + "s): " + this.description + "</div>" : "Recharge" == this.type ? (s += '<div class="recharge">', s += this.value + '<i class="material-icons">refresh</i>', s += "</div>") : "Time" == this.type && (s += '<div class="details">' + this.text + ": " + this.duration + " seconds</div>"), s += "</div>" }), i += "</div>", s += "</div>", t.append(s), a++
            })
        },
        error: function() {}
    })
}

function getAmulets(t) {
    var i = t.join(",");
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/pvp/amulets?ids=" + i,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            $.each(t, function() {
                var t = $('.pvp-equip .item[data-itemid="' + this.id + '"]'),
                    i = this.attributes;
                t.attr("data-name", this.name), t.attr("data-origname", this.name), t.find("img").attr("data-src", this.icon);
                var s = 0;
                $.each(this.attributes, function() {
                    var a = s + 1;
                    t.attr("data-stat" + a, "+" + this + " " + Object.keys(i)[s]), s++
                })
            })
        },
        error: function() {}
    })
}

function getBank() {
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/account/bank?access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            $("#bank .total-values").addClass("visible");
            var a = [],
                e = [],
                n = [],
                r = $("#itemLinks").val(),
                o = "",
                d = 0;
            $.each(t, function() {
                if (this.id) {
                    var t = "";
                    this.skin && (t = " data-skin=" + this.skin, -1 == $.inArray(this.skin, n) && n.push(this.skin));
                    var i = "";
                    if (this.upgrades) {
                        var s = 1;
                        $.each(this.upgrades, function() { i += " data-upgrade" + s + '="' + this + '"', s++, a.length > 199 ? -1 == $.inArray(this, e) && e.push(this) : -1 == $.inArray(this, a) && a.push(this) })
                    }
                    var c = "";
                    if (this.infusions) {
                        var s = 1;
                        $.each(this.infusions, function() { c += " data-infusion" + s + '="' + this + '"', s++, a.length > 199 ? -1 == $.inArray(this, e) && e.push(this) : -1 == $.inArray(this, a) && a.push(this) })
                    }
                    var l = "";
                    !this.binding || "Character" != this.binding && "Account" != this.binding || (l = "value-exclude"), o += '<a href="' + r + this.id + '" class="item ' + l + '" data-itemid="' + this.id + '" data-quantity="' + this.count + '"' + t + i + c + ' target="_blank">', o += '<img src="assets/img/gw2-logo.png">', this.count > 1 && (o += "<span>" + this.count + "</span>"), o += "</a>", a.length > 199 ? -1 == $.inArray(this.id, e) && e.push(this.id) : -1 == $.inArray(this.id, a) && a.push(this.id)
                } else o += '<div class="item empty"></div>';
                ++d % 30 == 0 && (o += "<br><br>")
            }), $("#bank > div.item-list").append(o), getBankItemDetails(a, n), getPrices(a), e.length && (getBankItemDetails(e, n), getPrices(e))
        },
        error: function() { $("#bank > div.item-list").html("<p class='error'>Inventories API key permission required.</p>"), $("#bank .total-values").removeClass("visible") }
    })
}

function getCollectibles() {
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/account/materials?access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            $("#collectibles .total-values").addClass("visible");
            var a, e = [],
                n = [],
                r = [],
                o = $("#itemLinks").val(),
                d = "";
            $.each(t, function() {
                if (this.id) {
                    a != this.category && (5 == this.category ? d += "<h4>Cooking Materials</h4>" : 6 == this.category ? d += "<h4>Common Crafting Materials</h4>" : 29 == this.category ? d += "<h4>Fine Crafting Materials</h4>" : 30 == this.category ? d += "<h4>Gemstones and Jewels</h4>" : 37 == this.category ? d += "<h4>Rare Crafting Materials</h4>" : 38 == this.category ? d += "<h4>Festive Materials</h4>" : 46 == this.category ? d += "<h4>Ascended Materials</h4>" : 49 == this.category ? d += "<h4>Cooking Ingredients</h4>" : 50 == this.category && (d += "<h4>Scribing Materials</h4>"), a = this.category);
                    var t = "";
                    0 == this.count && (t = " empty"), d += '<a href="' + o + this.id + '" class="item' + t + '" data-itemid="' + this.id + '" data-quantity="' + this.count + '" target="_blank">', d += '<img src="assets/img/gw2-logo.png">', this.count > 1 && (d += "<span>" + this.count + "</span>"), d += "</a>", n.length > 199 ? -1 == $.inArray(this.id, r) && r.push(this.id) : e.length > 199 ? -1 == $.inArray(this.id, n) && n.push(this.id) : -1 == $.inArray(this.id, e) && e.push(this.id)
                } else d += '<div class="item empty"></div>'
            }), $("#collectibles > div.item-list").append(d), getBankItemDetails(e), getPrices(e), n.length && (getBankItemDetails(n), getPrices(n)), r.length && (getBankItemDetails(r), getPrices(r))
        },
        error: function() { $("#collectibles > div.item-list").html("<p class='error'>Inventories API key permission required.</p>"), $("#collectibles .total-values").removeClass("visible") }
    })
}

function getCurrentTransactions() {
    $("#tradingPost p.error").remove(), $("#tradingPost > div").show(), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/commerce/transactions/current/buys?page=0&page_size=20&access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            if (t.length) {
                var a = [],
                    e = 0;
                $.each(t, function() {
                    var t = "t-" + this.id,
                        i = '<tr id="' + t + '" data-itemid="' + this.item_id + '"><td class="icon"><img src="assets/img/gw2-logo.png"></td><td class="item-name">' + this.item_id + "</td><td>" + this.quantity + "</td><td>" + priceFormat(this.price) + "</td><td>" + timeSince(this.created) + "</td></tr>";
                    $("#currentTransactions .buys tbody").append(i), -1 == $.inArray(this.item_id, a) && a.push(this.item_id), e++
                }), $("#currentTransactions .buys .total").html(s.getResponseHeader("X-Page-Total"));
                var n = 38 * e + 25;
                $("#currentTransactions .buys .table-overflow").css("min-height", n + "px"), $("#currentTransactions .buys table").show().siblings("p").hide(), getItemDetails(a)
            } else $("#currentTransactions .buys").addClass("empty"), $("#currentTransactions .buys table").hide().siblings("p").show(), $("#currentTransactions .buys .table-overflow").css("min-height", "0px")
        },
        error: function() { $("#tradingPost > h3").after("<p class='error'>Transactions API key permission required.</p>"), $("#tradingPost > div").hide() }
    }), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/commerce/transactions/current/sells?page=0&page_size=20&access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            if (t.length) {
                var a = [],
                    e = 0;
                $.each(t, function() {
                    var t = "t-" + this.id,
                        i = '<tr id="' + t + '" data-itemid="' + this.item_id + '"><td class="icon"><img src="assets/img/gw2-logo.png"></td><td class="item-name">' + this.item_id + "</td><td>" + this.quantity + "</td><td>" + priceFormat(this.price) + "</td><td>" + timeSince(this.created) + "</td></tr>";
                    $("#currentTransactions .sells tbody").append(i), -1 == $.inArray(this.item_id, a) && a.push(this.item_id), e++
                }), $("#currentTransactions .sells .total").html(s.getResponseHeader("X-Page-Total"));
                var n = 38 * e + 25;
                $("#currentTransactions .sells .table-overflow").css("min-height", n + "px"), $("#currentTransactions .sells table").show().siblings("p").hide(), getItemDetails(a)
            } else $("#currentTransactions .sells").addClass("empty"), $("#currentTransactions .sells table").hide().siblings("p").show(), $("#currentTransactions .sells .table-overflow").css("min-height", "0px")
        },
        error: function() {}
    })
}

function getTransactionHistory() {
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/commerce/transactions/history/buys?page=0&page_size=20&access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            if (t.length) {
                var a = [],
                    e = 0;
                $.each(t, function() {
                    var t = "t-" + this.id,
                        i = '<tr id="' + t + '" data-itemid="' + this.item_id + '"><td class="icon"><img src="assets/img/gw2-logo.png"></td><td class="item-name">' + this.item_id + "</td><td>" + this.quantity + "</td><td>" + priceFormat(this.price) + "</td><td>" + timeSince(this.created) + "</td><td>" + timeSince(this.purchased) + "</td></tr>";
                    $("#transactionHistory .buys tbody").append(i), -1 == $.inArray(this.item_id, a) && a.push(this.item_id), e++
                }), $("#transactionHistory .buys .total").html(s.getResponseHeader("X-Page-Total"));
                var n = 38 * e + 25;
                $("#transactionHistory .buys .table-overflow").css("min-height", n + "px"), $("#transactionHistory .buys table").show().siblings("p").hide(), getItemDetails(a)
            } else $("#transactionHistory .buys").addClass("empty"), $("#transactionHistory .buys table").hide().siblings("p").show(), $("#transactionHistory .buys .table-overflow").css("min-height", "0px")
        },
        error: function() {}
    }), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/commerce/transactions/history/sells?page=0&page_size=20&access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            if (t.length) {
                var a = [],
                    e = 0;
                $.each(t, function() {
                    var t = "t-" + this.id,
                        i = '<tr id="' + t + '" data-itemid="' + this.item_id + '"><td class="icon"><img src="assets/img/gw2-logo.png"></td><td class="item-name">' + this.item_id + "</td><td>" + this.quantity + "</td><td>" + priceFormat(this.price) + "</td><td>" + timeSince(this.created) + "</td><td>" + timeSince(this.purchased) + "</td></tr>";
                    $("#transactionHistory .sells tbody").append(i), -1 == $.inArray(this.item_id, a) && a.push(this.item_id), e++
                }), $("#transactionHistory .sells .total").html(s.getResponseHeader("X-Page-Total"));
                var n = 38 * e + 25;
                $("#transactionHistory .sells .table-overflow").css("min-height", n + "px"), $("#transactionHistory .sells table").show().siblings("p").hide(), getItemDetails(a)
            } else $("#transactionHistory .sells").addClass("empty"), $("#transactionHistory .sells table").hide().siblings("p").show(), $("#transactionHistory .sells .table-overflow").css("min-height", "0px")
        },
        error: function() {}
    })
}

function getWallet() {
    $("#wallet p.error").remove(), $("#wallet > div").show(), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/account/wallet?access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            $.each(t, function() {
                this.id;
                $("#wallet > div").append('<div data-id="' + this.id + '"><h4 class="currency-name"></h4> <span class="quantity">' + this.value + '</span> <img class="icon" src=""></div>')
            }), $.ajax({
                type: "GET",
                url: "https://api.guildwars2.com/v2/currencies?lang=fr&ids=all",
                dataType: "json",
                cache: !1,
                timeout: 1e4,
                success: function(t, i, s) {
                    $.each(t, function() {
                        var t = $('#wallet div[data-id="' + this.id + '"]'),
                            i = parseInt(t.find(".quantity").html());
                        t.attr("title", this.description), t.find(".icon").attr("data-src", this.icon), t.find(".currency-name").html(this.name), 1 == this.id ? t.find(".quantity").html(priceFormat(i)) : t.find(".quantity").html(formatNumbers(i))
                    })
                },
                error: function() {}
            })
        },
        error: function() { $("#wallet h3").after("<p class='error'>Wallet API key permission required.</p>"), $("#wallet > div").hide() }
    })
}

function getUnlocks() {
    $("#unlocks p.error").remove(), $("#unlocks > div").show(), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/account/skins?access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            var a = [];
            $.each(t, function() { a.push(this) });
            var e = a.length + 1,
                n = Math.ceil(e / 200),
                r = [];
            for (x = 0; x < n; x++) r[x] = [];
            var o = 0;
            $.each(a, function() {
                var t = Math.floor(o / 200),
                    i = this.toString();
                r[t].push(i), o++
            });
            var o = 0;
            $.each(r, function() { getWardrobeSkins(r[o]), o++ })
        },
        error: function() { $("#unlocks h3").after("<p class='error'>Unlocks API key permission required.</p>"), $("#unlocks > div").hide() }
    }), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/account/dyes?access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            var a = [];
            $.each(t, function() { a.push(this) });
            var e = a.length + 1,
                n = Math.ceil(e / 200),
                r = [];
            for (x = 0; x < n; x++) r[x] = [];
            var o = 0;
            $.each(a, function() {
                var t = Math.floor(o / 200),
                    i = this.toString();
                r[t].push(i), o++
            });
            var o = 0;
            $.each(r, function() { getDyeColors(r[o]), o++ })
        },
        error: function() {}
    }), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/account/minis?access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            var a = [];
            $.each(t, function() { a.push(this) });
            var e = a.length + 1,
                n = Math.ceil(e / 200),
                r = [];
            for (x = 0; x < n; x++) r[x] = [];
            var o = 0;
            $.each(a, function() {
                var t = Math.floor(o / 200),
                    i = this.toString();
                r[t].push(i), o++
            });
            var o = 0;
            $.each(r, function() { getMinis(r[o]), o++ })
        },
        error: function() {}
    }), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/account/finishers?access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            var a = [];
            $.each(t, function() {
                a.push(this.id);
                var t, i = "";
                this.permanent ? (t = "&#x221e;", i = "perm") : t = this.quantity;
                var s = '<div data-finisher-id="' + this.id + '"><h4 class="name"></h4><div class="details"><span class="qty ' + i + '">' + t + '</span><img src=""></div></div>';
                $("#unlocks .finishers").append(s)
            });
            var e = a.length + 1,
                n = Math.ceil(e / 200),
                r = [];
            for (x = 0; x < n; x++) r[x] = [];
            var o = 0;
            $.each(a, function() {
                var t = Math.floor(o / 200),
                    i = this.toString();
                r[t].push(i), o++
            });
            var o = 0;
            $.each(r, function() { getFinishers(r[o]), o++ })
        },
        error: function() {}
    }), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/account/titles?access_token=" + key,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            var a = [];
            $.each(t, function() { a.push(this) });
            var e = a.length + 1,
                n = Math.ceil(e / 200),
                r = [];
            for (x = 0; x < n; x++) r[x] = [];
            var o = 0;
            $.each(a, function() {
                var t = Math.floor(o / 200),
                    i = this.toString();
                r[t].push(i), o++
            });
            var o = 0;
            $.each(r, function() { getTitles(r[o]), o++ })
        },
        error: function() {}
    })
}

function getTitles(t) {
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/titles?lang=fr&ids=" + t,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            var i = [];
            $.each(t, function() {
                var t = '<div data-achievement-id="' + this.achievement + '"><h4>' + this.name + "</h4></div>";
                $("#unlocks .titles").append(t), i.push(this.achievement)
            }), getTitleAchievements(i)
        },
        error: function() {}
    })
}

function getTitleAchievements(t) {
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/achievements?lang=fr&ids=" + t,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            $.each(t, function() {
                var t = "",
                    i = this.tiers.length - 1;
                if ("" == this.requirement) t = this.description;
                else if (-1 != this.requirement.indexOf("  ")) {
                    var s = Number(this.tiers[i].count).toLocaleString();
                    t = this.requirement.split("  ")[0] + " " + s + " " + this.requirement.split("  ")[1]
                } else t = this.requirement;
                var a = "<small>" + t + "</small>";
                $('#unlocks .titles div[data-achievement-id="' + this.id + '"]').append(a)
            })
        },
        error: function() {}
    })
}

function getFinishers(t) { $.ajax({ type: "GET", url: "https://api.guildwars2.com/v2/finishers?lang=fr&ids=" + t, dataType: "json", cache: !0, timeout: 1e4, success: function(t) { $.each(t, function() { $('#unlocks .finishers div[data-finisher-id="' + this.id + '"]').css("order", this.order), $('#unlocks .finishers div[data-finisher-id="' + this.id + '"] img').attr("data-src", this.icon), $('#unlocks .finishers div[data-finisher-id="' + this.id + '"] .name').html(this.name) }) }, error: function() {} }) }

function getMinis(t) {
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/minis?lang=fr&ids=" + t,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            var i = [];
            $.each(t, function() {
                var t = '<a class="item" href="' + $("#itemLinks").val() + this.item_id + '" target="_blank" data-name="' + this.name + '" data-itemid="' + this.item_id + '" data-order="' + this.order + '"><img data-src="' + this.icon + '"></a>';
                i.push(this.item_id), $("#unlocks .minis").append(t)
            });
            var s = i.length + 1,
                a = Math.ceil(s / 200),
                e = [];
            for (x = 0; x < a; x++) e[x] = [];
            var n = 0;
            $.each(i, function() {
                var t = Math.floor(n / 200),
                    i = this.toString();
                e[t].push(i), n++
            });
            var n = 0;
            $.each(e, function() { getBankItemDetails(e[n], null, sortMinis), getPrices(e[n]), n++ })
        },
        error: function() {}
    })
}

function getDyeColors(t) {
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/colors?lang=fr&ids=" + t,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            var i = [];
            $.each(t, function() {
                var t = this.cloth.rgb.toString().split("[").join("").split("]").join(""),
                    s = '<a class="item dye" data-icon="assets/img/gw2-logo.png" data-name="' + this.name + '" style="background: rgb(' + t + ')"';
                this.item && (s += ' href="' + $("#itemLinks").val() + this.item + '" data-itemid="' + this.item + '" target="_blank"', i.push(this.item)), s += "></a>", $("#unlocks .dyes").append(s)
            });
            var s = i.length + 1,
                a = Math.ceil(s / 200),
                e = [];
            for (x = 0; x < a; x++) e[x] = [];
            var n = 0;
            $.each(i, function() {
                var t = Math.floor(n / 200),
                    i = this.toString();
                e[t].push(i), n++
            });
            var n = 0;
            $.each(e, function() { getBankItemDetails(e[n], null, sortDyes), getPrices(e[n]), n++ })
        },
        error: function() {}
    })
}

function getWardrobeSkins(t) {
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/skins?lang=fr&ids=" + t,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            $.each(t, function() {
                var t, i, s = '<a href="javascript:;" target="_blank" class="item skin" data-skin-id="' + this.id + '" data-name="' + this.name + '" data-maincat="' + this.type + '"';
                this.details ? (t = this.type + "-" + this.details.type, i = this.details.type, s += ' data-cat="' + this.details.type, this.details.weight_class && (t += "-" + this.details.weight_class, i += " - " + this.details.weight_class, s += "-" + this.details.weight_class), s += '"') : (t = "Armor-Back", i = "Back", s += ' data-cat="Back"'), s += '><img data-src="' + this.icon + '"></a>', $("#unlocks .skins ." + t).length || $("#unlocks .skins").append('<div class="' + t + '"><h4>' + i + "</h4></div>"), $("#unlocks .skins ." + t).append(s)
            }), sortSkins()
        },
        error: function() {}
    })
}

function getPrices(t) {
    var i = t.toString();
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/commerce/prices?ids=" + i,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            $.each(t, function() {
                this.id;
                $(".item[data-itemid='" + this.id + "']").attr("data-buyprice", this.buys.unit_price), $(".item[data-upgrade1='" + this.id + "']").attr("data-upgrade1-buyprice", this.buys.unit_price), $(".item[data-upgrade2='" + this.id + "']").attr("data-upgrade2-buyprice", this.buys.unit_price), $(".item[data-itemid='" + this.id + "']").attr("data-sellprice", this.sells.unit_price), $(".item[data-upgrade1='" + this.id + "']").attr("data-upgrade1-sellprice", this.sells.unit_price), $(".item[data-upgrade2='" + this.id + "']").attr("data-upgrade2-sellprice", this.sells.unit_price)
            })
        },
        error: function() {}
    })
}

function getBankItemDetails(t, i, s) {
    var a = t.toString(),
        e = "";
    i && i.length && (e = i.toString());
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/items?lang=fr&ids=" + a,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            $.each(t, function() {
                var t = this.id;
                $(".item[data-itemid='" + this.id + "'] img").attr("data-src", this.icon), $(".item[data-itemid='" + this.id + "'] .item-name").html(this.name), $(".item[data-itemid='" + this.id + "']").attr("data-name", this.name), $(".item[data-itemid='" + this.id + "']").attr("data-vendorprice", this.vendor_value), $(".item[data-upgrade1='" + this.id + "']").attr("data-upgrade1-vendor", this.vendor_value), $(".item[data-upgrade2='" + this.id + "']").attr("data-upgrade2-vendor", this.vendor_value), $(".item[data-itemid='" + this.id + "']").attr("data-origname", this.name), $(".item[data-itemid='" + this.id + "']").attr("data-description", this.description), $(".item[data-itemid='" + this.id + "']").attr("data-type", this.type), $(".item[data-itemid='" + this.id + "']").attr("data-level", this.level), $(".item[data-itemid='" + this.id + "']").attr("data-rarity", this.rarity), $(".item[data-itemid='" + this.id + "']").addClass(this.rarity), $(".item[data-itemid='" + this.id + "']").attr("data-icon", this.icon);
                var i = '<img src="' + this.icon + '"> ' + this.name,
                    s = '<img src="' + this.icon + '"> ' + this.name;
                if (this.flags) {
                    var a = "";
                    $.each(this.flags, function() { a += this + "," }), $(".item[data-itemid='" + this.id + "']").attr("data-flags", a), $(".item[data-upgrade1='" + this.id + "']").attr("data-upgrade1-flags", a), $(".item[data-upgrade2='" + this.id + "']").attr("data-upgrade2-flags", a)
                }
                if (this.details) {
                    if ($(".item[data-itemid='" + this.id + "']").attr("data-detailstype", this.details.type), $(".item[data-itemid='" + this.id + "']").attr("data-minpower", this.details.min_power), $(".item[data-itemid='" + this.id + "']").attr("data-maxpower", this.details.max_power), $(".item[data-itemid='" + this.id + "']").attr("data-defense", this.details.defense), this.details.infix_upgrade) {
                        if (this.details.infix_upgrade.attributes) {
                            var e = 1;
                            $.each(this.details.infix_upgrade.attributes, function() { $(".item[data-itemid='" + t + "']").attr("data-stat" + e, "+" + this.modifier + " " + this.attribute), e++ })
                        }
                        this.details.infix_upgrade.buff && $(".item[data-itemid='" + t + "']").attr("data-buff", this.details.infix_upgrade.buff.description)
                    }
                    if (this.details.bonuses) {
                        var e = 1;
                        $.each(this.details.bonuses, function() { $(".item[data-itemid='" + t + "']").attr("data-bonus" + e, "(" + e + ") " + this), e++ })
                    }
                    $(".item[data-upgrade1='" + this.id + "']").attr("data-upgrade1-html", i), $(".item[data-upgrade2='" + this.id + "']").attr("data-upgrade2-html", i), $(".item[data-infusion1='" + this.id + "']").attr("data-infusion1-html", s), $(".item[data-infusion2='" + this.id + "']").attr("data-infusion2-html", s)
                }
            }), "" != e && $.ajax({ type: "GET", url: "https://api.guildwars2.com/v2/skins?lang=fr&ids=" + e, dataType: "json", cache: !0, timeout: 1e4, success: function(t) { $.each(t, function() { $(".item[data-skin='" + this.id + "'] img").attr("data-src", this.icon), $(".item[data-skin='" + this.id + "'] .item-name").html(this.name), $(".item[data-skin='" + this.id + "']").attr("data-name", this.name) }) }, error: function() {} }), s && s()
        },
        error: function() {}
    })
}

function getItemDetails(t) {
    var i = t.toString();
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/items?lang=fr&ids=" + i,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            $.each(t, function() {
                var t = $("#itemLinks").val();
                $("tr[data-itemid='" + this.id + "'] .icon img").attr("data-src", this.icon), $("tr[data-itemid='" + this.id + "'] .item-name").addClass(this.rarity).html('<a href="' + t + this.id + '" target="_blank">' + this.name + "</a>")
            })
        },
        error: function() {}
    })
}

function getSpecializations(t) {
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/specializations?ids=" + t,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            var i = [];
            if ($.each(t, function() {
                    var t = this.id,
                        s = "<h4>" + this.name + "</h4>";
                    s += "<div>", s += '<img class="background" data-src="' + this.background + '">';
                    var a = 1;
                    $.each(this.minor_traits, function() { i.push(this), s += '<span class="item trait minor trait-' + a + '" data-traitid="' + this + '"></span>', a++ });
                    var a = 1;
                    $.each(this.major_traits, function() { i.push(this), s += '<span class="item trait major trait-' + a + '" data-traitid="' + this + '"></span>', a++ }), s += "</div>", $(".specialization[data-specid='" + t + "']").html(s)
                }), $(".specialization").each(function() { $(this).find('span[data-traitid="' + $(this).attr("data-trait1") + '"]').addClass("selected"), $(this).find('span[data-traitid="' + $(this).attr("data-trait2") + '"]').addClass("selected"), $(this).find('span[data-traitid="' + $(this).attr("data-trait3") + '"]').addClass("selected") }), i.length) {
                var s = i.length + 1,
                    a = Math.ceil(s / 200),
                    e = [];
                for (x = 0; x < a; x++) e[x] = [];
                var n = 0;
                $.each(i, function() {
                    var t = Math.floor(n / 200),
                        i = this.toString();
                    e[t].push(i), n++
                });
                var n = 0;
                $.each(e, function() { getTraits(e[n]), n++ })
            }
        },
        error: function() {}
    })
}

function getTraits(t) {
    var i = t.toString();
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/traits?ids=" + i,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            $.each(t, function() {
                var t = this.id,
                    i = $(".specialization span[data-traitid='" + t + "']"),
                    s = '<img data-src="' + this.icon + '">';
                i.html(s), i.attr("data-name", this.name), i.attr("data-desc", this.desc)
            })
        },
        error: function() {}
    })
}

function getPvp() {
    $("#pvp p.error").remove(), $("#pvp > div").show(), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/pvp/stats?access_token=" + key,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            var i, s, a, e = t.aggregate.wins + t.aggregate.losses + t.aggregate.byes + t.aggregate.forfeits + t.aggregate.desertions,
                n = t.aggregate.wins + t.aggregate.byes,
                r = t.aggregate.losses + t.aggregate.forfeits + t.aggregate.desertions;
            0 == e ? (i = 0, s = 0, a = 0) : (i = 0 == r ? n : n / r, i = parseFloat(Math.round(100 * i) / 100).toFixed(2), s = n / e, s = parseFloat(100 * s).toFixed(2), a = parseFloat(100 - s).toFixed(2));
            var o = "";
            o += '<div class="flex-container">', o += '<div class="stat-summary">', o += "<h4>Summary</h4>", o += '<div class="pvp-rank"><img data-src="assets/img/' + getRank(t.pvp_rank) + '_rank.png"> <span class="rank">' + getRank(t.pvp_rank) + "</span> (" + t.pvp_rank + ")</div>", o += '<div class="flex-container"><div>', o += 'Wins<span class="big-stat">' + n + "</span>", o += "</div><div>", o += 'Losses<span class="big-stat">' + r + "</span>", o += "</div><div>", o += 'Win %<span class="big-stat">' + s + "%</span>", o += "</div><div>", o += 'Ratio<span class="big-stat">' + i + "</span>", o += "</div></div>", o += '<div class="progress-bar">', o += '<div class="wins" style="width: ' + s + '%"></div>', o += '<div class="losses" style="width: ' + a + '%"></div>', o += "</div>", o += "<h4>Games By Profession</h4>", o += '<figure id="professionGames" class="chart-container">', o += '<canvas width="150" height="150"></canvas>', o += "<figcaption></figcaption>", o += "</figure>", o += "<h4>Wins By Profession</h4>", o += '<figure id="professionWins" class="chart-container">', o += '<canvas width="150" height="150"></canvas>', o += "<figcaption></figcaption>", o += "</figure>", o += "</div>", o += '<div class="stat-breakdown">', o += "<h4>Stats By Profession</h4>", o += '<div class="profession-stats">';
            var d = [],
                c = [],
                l = [],
                h = [],
                p = 0;
            $.each(t.professions, function(t, i) {
                var s, a, e, n = t.capitalizeFirstLetter(),
                    r = this.wins + this.losses + this.byes + this.forfeits + this.desertions,
                    u = this.wins + this.byes,
                    m = this.losses + this.forfeits + this.desertions;
                0 == r ? (s = 0, a = 0, e = 0) : (s = 0 == m ? u : u / m, s = parseFloat(Math.round(100 * s) / 100).toFixed(2), a = u / r, a = parseFloat(100 * a).toFixed(2), e = parseFloat(100 - a).toFixed(2));
                var v;
                "Guardian" == n ? v = "#00b4ff" : "Warrior" == n ? v = "#f79d00" : "Engineer" == n ? v = "#ffde00" : "Ranger" == n ? v = "#d4eb00" : "Thief" == n ? v = "#ff5300" : "Elementalist" == n ? v = "#ff0078" : "Mesmer" == n ? v = "#ff00f0" : "Necromancer" == n ? v = "#b4ef00" : "Revenant" == n && (v = "#ff0000"), d.push(r), c.push(u), l.push(n), h.push(v), o += '<div class="by-profession"><img data-src="assets/img/' + n + '.png"><h5>' + n + "</h5>", o += '<div class="flex-container"><div>', o += 'Wins<span class="big-stat">' + u + "</span>", o += "</div><div>", o += 'Losses<span class="big-stat">' + m + "</span>", o += "</div><div>", o += 'Win %<span class="big-stat">' + a + "%</span>", o += "</div><div>", o += 'Ratio<span class="big-stat">' + s + "</span>", o += "</div></div>", o += '<div class="progress-bar">', o += '<div class="wins" style="width: ' + a + '%"></div>', o += '<div class="losses" style="width: ' + e + '%"></div>', o += "</div>", o += "</div>", p++
            }), o += "</div>", o += "<h4>Stats By Ladder</h4>", o += '<div class="ladder-stats">';
            var p = 0;
            $.each(t.ladders, function(t, i) {
                var s, a, e, n = this.wins + this.losses + this.byes + this.forfeits + this.desertions,
                    r = this.wins + this.byes,
                    d = this.losses + this.forfeits + this.desertions;
                0 == n ? (s = 0, a = 0, e = 0) : (s = 0 == d ? r : r / d, s = parseFloat(Math.round(100 * s) / 100).toFixed(2), a = r / n, a = parseFloat(100 * a).toFixed(2), e = parseFloat(100 - a).toFixed(2));
                var c = t.capitalizeFirstLetter();
                "Soloarenarated" == c ? c = "Solo Arena (Old)" : "Teamarenarated" == c && (c = "Team Arena (Old)"), o += '<div class="' + t + '"><h5>' + c + "</h5>", o += '<div class="flex-container"><div>', o += 'Wins<span class="big-stat">' + r + "</span>", o += "</div><div>", o += 'Losses<span class="big-stat">' + d + "</span>", o += "</div><div>", o += 'Win %<span class="big-stat">' + a + "%</span>", o += "</div><div>", o += 'Ratio<span class="big-stat">' + s + "</span>", o += "</div></div>", o += '<div class="progress-bar">', o += '<div class="wins" style="width: ' + a + '%"></div>', o += '<div class="losses" style="width: ' + e + '%"></div>', o += "</div>", o += "</div>", p++
            }), o += "</div>", o += "</div>", o += "</div>", o += "</div>", $("#pvp .stats").html(o), $("#pvp .stats .unranked").prependTo($("#pvp .stats .unranked").parent()), $("#pvp .stats .ranked").prependTo($("#pvp .stats .ranked").parent()), drawChart($("#professionGames"), d, l, h), drawChart($("#professionWins"), c, l, h)
        },
        error: function() { $("#pvp h3").after("<p class='error'>PvP API key permission required.</p>"), $("#pvp > div").hide() }
    }), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/pvp/games?ids=all&access_token=" + key,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            var i = "",
                s = [];
            $.each(t, function() {
                s.push(this.map_id);
                var t = new Date(this.started);
                t.setMinutes(t.getMinutes() - 10);
                var a = new Date(this.ended);
                a.setMinutes(a.getMinutes() - 10);
                var e = a - t;
                e = Math.round(e % 864e5 % 36e5 / 6e4);
                var n, r, o = this.scores.red + this.scores.blue;
                0 == o ? (n = 0, r = 0) : (n = this.scores.blue / o, n = parseFloat(Math.round(100 * n)), r = 100 - n), i += '<div class="clearfix" data-ended="' + a.getTime() + '">', i += '<img class="map-img" data-src="" data-mapid="' + this.map_id + '">', i += '<h4 class="' + this.result + '">' + this.result + ' on <span class="map-name" data-mapid="' + this.map_id + '"></span></h4>', i += "<h6>" + formatDate(a) + " at " + formatTime(a) + " <span>Duration: " + e + " mins</span></h6>", i += '<div class="flex-container">', i += "<div>", i += '<img data-src="assets/img/' + this.profession + '.png"> <strong>' + this.profession + "</strong>", i += "</div>", i += '<div class="game-score">', i += '<span class="red-score">' + this.scores.red + "</span> - ", i += '<span class="blue-score">' + this.scores.blue + "</span>", i += "</div>", i += "</div>", i += '<div class="progress-bar">', i += '<div class="red-score" style="width: ' + r + '%"></div>', i += '<div class="blue-score" style="width: ' + n + '%"></div>', i += "</div>", i += "</div>"
            }), $("#pvp .games").html(i), getMapNames(s), sortGames()
        },
        error: function() {}
    }), $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/pvp/standings?ids=all&access_token=" + key,
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            var i = "";
            0 == t.length ? (i += '<div><h4>Unranked</h4><div class="division"><img src="assets/img/division-0.png"><h5>Division 1: Amber</h5></div></div>', $("#pvp .standings").html(i)) : ($.each(t, function() { i += '<div data-season="' + this.season_id + '" data-points="' + this.current.points + '" data-division="' + this.current.division + '" data-tier="' + this.current.tier + '" data-repeats="' + this.current.repeats + '"></div>' }), $("#pvp .standings").html(i), getSeasons())
        },
        error: function() {}
    })
}

function getSeasons() {
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/pvp/seasons?ids=all",
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            var s = 1;
            $.each(t, function() {
                var t = this.id,
                    a = this.name,
                    e = $('.standings div[data-season="' + t + '"]');
                if (e.length > 0) {
                    var n = Number(e.attr("data-points")),
                        r = e.attr("data-division"),
                        o = Number(e.attr("data-tier")),
                        d = Number(e.attr("data-tier")) + 1,
                        c = Number(e.attr("data-repeats")) + 1,
                        l = (this.divisions[r].large_icon, this.divisions[r].name),
                        h = this.divisions[r].pip_icon,
                        p = new Date(this.start).toLocaleDateString(),
                        u = new Date(this.end).toLocaleDateString();
                    1 == this.active && e.addClass("active"), e.attr("data-order", s);
                    var m = "<h4>" + a + "</h4>";
                    m += "<small>" + p + " - " + u + "</small>", m += '<div class="division">', m += '<img data-src="assets/img/division-' + r + '.png">', m += "<h5>" + l, 5 == r && (m += " x" + c), m += "</h5>", m += "<h6>Tier " + d + "</h6>", m += "</div>", m += '<div class="pips">';
                    var v = 0;
                    $.each(this.divisions[r].tiers, function() {
                        var t = this.points,
                            s = n + t * o;
                        for (m += '<div class="tier">', i = 0; i < t; i++) {
                            var a = "";
                            v < s && (a += " earned"), m += '<div class="pip' + a + '">';
                            var e = Math.floor(7 * Math.random() + 1);
                            m += '<img data-src="' + h + '" class="' + ("pip-" + e) + '">', m += "</div>", v++
                        }
                        m += "</div>"
                    }), m += "</div>", e.append(m)
                }
                s++
            }), sortSeasons()
        },
        error: function() {}
    })
}

function sortSeasons() {
    var t = $("#pvp .standings"),
        i = t.children("div").get();
    i.sort(function(t, i) { return $(t).attr("data-order").toLowerCase().localeCompare($(i).attr("data-order").toLowerCase()) }), $.each(i, function(i, s) { t.append(s) })
}

function getMapNames(t) {
    var i = t.toString();
    $.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/maps?ids=" + i,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, i, s) {
            $.each(t, function() {
                $('span[data-mapid="' + this.id + '"]').html(this.name);
                var t = this.name.split(" ").join("_");
                $('img[data-mapid="' + this.id + '"]').attr("data-src", "assets/img/" + t + ".jpg")
            })
        },
        error: function() {}
    })
}

function getRank(t) { return t < 10 ? "Rabbit" : t < 20 ? "Deer" : t < 30 ? "Dolyak" : t < 40 ? "Wolf" : t < 50 ? "Tiger" : t < 60 ? "Bear" : t < 70 ? "Shark" : t < 80 ? "Phoenix" : t < 90 ? "Dragon" : void 0 }

function handlePage(t, i, s) {
    $.ajax({
        type: "GET",
        url: t,
        dataType: "json",
        cache: !1,
        timeout: 1e4,
        success: function(t, a, e) {
            if (!t.text) {
                var n = [],
                    r = 0;
                $.each(t, function() {
                    var t = "t-" + this.id,
                        a = '<tr id="' + t + '" data-itemid="' + this.item_id + '"><td class="icon"><img src="assets/img/gw2-logo.png"></td><td class="item-name">' + this.item_id + "</td><td>" + this.quantity + "</td><td>" + priceFormat(this.price) + "</td><td>" + timeSince(this.created) + "</td><td>" + timeSince(this.purchased) + "</td></tr>";
                    $("#" + i + " ." + s + " tbody").append(a), -1 == $.inArray(this.item_id, n) && n.push(this.item_id), r++
                });
                var o = 38 * r + 25;
                $("#" + i + " ." + s + " .table-overflow").css("min-height", o + "px"), getItemDetails(n)
            }
        },
        error: function() {}
    })
}

function sortCharacters() {
    var t = $("#charList option"),
        i = t.map(function(t, i) { return { t: $(i).text(), v: i.value, l: $(i).attr("data-level") } }).get();
    i.sort(function(t, i) { return t.t > i.t ? 1 : t.t < i.t ? -1 : 0 }), t.each(function(t, s) { s.value = i[t].v, $(s).text(i[t].t), $(s).attr("data-level", i[t].l) })
}

function sortSkins() {
    var t = $("#unlocks .skins"),
        i = t.children("div").get();
    i.sort(function(t, i) { return $(t).attr("class").toLowerCase().localeCompare($(i).attr("class").toLowerCase()) }), $.each(i, function(i, s) { t.append(s) })
}

function sortGames() {
    var t = $("#pvp .games"),
        i = t.children("div").get();
    i.sort(function(t, i) { return $(i).attr("data-ended").toLowerCase().localeCompare($(t).attr("data-ended").toLowerCase()) }), $.each(i, function(i, s) { t.append(s) })
}

function sortMinis() {
    var t = $("#unlocks .minis"),
        i = t.children("a");
    i.sort(function(t, i) {
        var s = Number(t.getAttribute("data-order")),
            a = Number(i.getAttribute("data-order"));
        return s > a ? 1 : s < a ? -1 : 0
    }), i.detach().appendTo(t), 0 == $("#unlocks .minis h4").length && $("#unlocks .minis").append('<h4 data-rarity="Exotic">Exotic</h4><h4 data-rarity="Rare">Rare</h4><h4 data-rarity="Masterwork">Masterwork</h4><h4 data-rarity="Fine">Fine</h4><h4 data-rarity="Basic">Basic</h4>'), $("#unlocks .minis a").reverse().each(function() {
        var t = $(this).attr("data-rarity");
        $('#unlocks .minis h4[data-rarity="' + t + '"]').after($(this))
    })
}

function sortDyes() {
    var t = $("#unlocks .dyes"),
        i = t.children("a").get();
    i.sort(function(t, i) { return $(t).attr("data-name").toLowerCase().localeCompare($(i).attr("data-name").toLowerCase()) }), $.each(i, function(i, s) { t.append(s) }), 0 == $("#unlocks .dyes h4").length && $("#unlocks .dyes").append('<h4 data-rarity="Rare">Rare</h4><h4 data-rarity="Masterwork">Uncommon</h4><h4 data-rarity="Fine">Common</h4><h4 data-rarity="Starter">Starter</h4>'), $("#unlocks .dyes a").reverse().each(function() {
        var t = $(this).attr("data-rarity");
        t || (t = "Starter"), $('#unlocks .dyes h4[data-rarity="' + t + '"]').after($(this))
    })
}

function sortCrafting() {
    $(".crafting").each(function() {
        var t = $(this),
            i = t.children("span").get();
        i.sort(function(t, i) { return $(t).attr("class").toLowerCase().localeCompare($(i).attr("class").toLowerCase()) }), $.each(i, function(i, s) { t.append(s) })
    })
}

function sortEquipment() {
    $(".char-details > div").each(function() {
        var t = $(this).attr("id"),
            i = $(this).find(".equipment");
        i.children("div").length && (i.append('<div class="flex-container"><div class="weapons"><h4>Weapons</h4></div><div class="armor"><h4>Armor</h4></div><div class="trinkets"><h4>Trinkets</h4></div><div class="tools"><h4>Tools</h4></div></div>'), i.find(".WeaponA1").appendTo("#" + t + " .weapons"), i.find(".WeaponA2").appendTo("#" + t + " .weapons"), i.find(".WeaponB1").appendTo("#" + t + " .weapons"), i.find(".WeaponB2").appendTo("#" + t + " .weapons"), i.find(".WeaponAquaticA").appendTo("#" + t + " .weapons"), i.find(".WeaponAquaticB").appendTo("#" + t + " .weapons"), i.find(".Helm").appendTo("#" + t + " .armor"), i.find(".Shoulders").appendTo("#" + t + " .armor"), i.find(".Coat").appendTo("#" + t + " .armor"), i.find(".Gloves").appendTo("#" + t + " .armor"), i.find(".Leggings").appendTo("#" + t + " .armor"), i.find(".Boots").appendTo("#" + t + " .armor"), i.find(".HelmAquatic").appendTo("#" + t + " .armor"), i.find(".Amulet").appendTo("#" + t + " .trinkets"), i.find(".Ring1").appendTo("#" + t + " .trinkets"), i.find(".Ring2").appendTo("#" + t + " .trinkets"), i.find(".Accessory1").appendTo("#" + t + " .trinkets"), i.find(".Accessory2").appendTo("#" + t + " .trinkets"), i.find(".Backpack").appendTo("#" + t + " .trinkets"), i.find(".Pick").appendTo("#" + t + " .tools"), i.find(".Axe").appendTo("#" + t + " .tools"), i.find(".Sickle").appendTo("#" + t + " .tools"))
    })
}

function priceFormat(t) {
    var i = t.toString().length,
        s = t.toString().split("").reverse().join("");
    if (i < 3) return '<span class="copper">' + t + '</span><img src="assets/img/copper.png" alt="c">';
    if (i < 5) {
        var a = '<span class="silver">',
            e = "";
        e = s[3] ? "0" == s[3] ? s[2] : s[3] + "" + s[2] : s[2];
        var n = "";
        return n = "0" == s[1] ? s[0] : s[1] + "" + s[0], a += e + '</span><img src="assets/img/silver.png" alt="s"> <span class="copper">' + n + '</span><img src="assets/img/copper.png" alt="c">'
    }
    var a = '<span class="gold">';
    s[9] && (a += s[9]), s[8] && (a += s[8]), s[7] && (a += s[7]), s[6] && (a += s[6]), s[5] && (a += s[5]);
    var e = "";
    e = "0" == s[3] ? s[2] : s[3] + "" + s[2];
    var n = "";
    return n = "0" == s[1] ? s[0] : s[1] + "" + s[0], a += s[4] + '</span><img src="assets/img/gold.png" alt="g"> <span class="silver">' + e + '</span><img src="assets/img/silver.png" alt="s"> <span class="copper">' + n + '</span><img src="assets/img/copper.png" alt="c">'
}

function formatDate(t) { return t = new Date(t), t.toLocaleDateString() }

function formatTime(t) { return time = new Date(t), time = time.toLocaleTimeString(navigator.language, { hour: "2-digit", minute: "2-digit" }), time }

function formatNumbers(t) { return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") }

function timeSince(t) {
    t = new Date(t);
    var i = Math.floor((new Date - t) / 1e3),
        s = Math.floor(i / 31536e3);
    return s > 1 ? s + " years" : (s = Math.floor(i / 2592e3)) > 1 ? s + " months" : (s = Math.floor(i / 86400)) > 1 ? s + " days" : (s = Math.floor(i / 3600)) > 1 ? s + " hrs" : (s = Math.floor(i / 60), s > 1 ? s + " mins" : Math.floor(i) + " secs")
}

function getCookie(t) { return document.cookie.length > 0 && (c_start = document.cookie.indexOf(t + "="), -1 != c_start) ? (c_start = c_start + t.length + 1, c_end = document.cookie.indexOf(";", c_start), -1 == c_end && (c_end = document.cookie.length), unescape(document.cookie.substring(c_start, c_end))) : "" }

function applyCookies() { if ("" != getCookie("apiKey")) { keyCheck(getCookie("apiKey")) } "" != getCookie("itemLinks") && $("#itemLinks").val(getCookie("itemLinks")) }

function drawChart(t, i, s, a) {
    var e = "",
        n = t.find("canvas")[0],
        r = n.getContext("2d"),
        o = [n.width / 2, n.height / 2],
        d = Math.min(n.width, n.height) / 2,
        c = 0,
        l = 0;
    for (var h in i) l += i[h];
    for (var h = 0; h < i.length; h++) r.fillStyle = a[h], r.beginPath(), r.moveTo(o[0], o[1]), r.arc(o[0], o[1], d, c, c + 2 * Math.PI * (i[h] / l), !1), r.lineTo(o[0], o[1]), r.fill(), c += 2 * Math.PI * (i[h] / l), e += '<div class="' + s[h] + '">' + s[h] + ": " + i[h] + "</div>";
    t.find("figcaption").html(e)
}

function lazyLoad() {
    var t = $("section.visible, section.loading").attr("id"),
        i = $("#" + t),
        s = "#" + t;
    if ("characters" == t) {
        var a = i.find(".char-details > div.visible > .subtabs"),
            e = a.find("nav a.selected").attr("data-class"),
            n = a.children("." + e);
        s += " #" + i.find(".char-details > div.visible").attr("id")
    } else var a = i.find(".subtabs"),
        e = a.find("nav a.selected").attr("data-class"),
        n = i.find(".subtabs > div.visible");
    if (a.length)
        if (n.find(".subtabs").length) {
            var r = n.find(".subtabs"),
                o = (r.find(".subtabs > div.visible"), r.find("nav a.selected").attr("data-class"));
            s += " ." + e + " ." + o
        } else s += " ." + e;
    var d = $(window).scrollTop(),
        c = $(window).height(),
        l = d + c;
    $(s).each(function() {
        $(this).find("img[data-src]").each(function() {
            var t = $(this);
            t.offset().top < l + 20 && t.attr("src", t.attr("data-src")).removeAttr("data-src")
        })
    })
}

function getAchievements() {
    $.when($.ajax({
        type: "GET",
        url: "https://api.guildwars2.com/v2/achievements/groups?ids=all",
        dataType: "json",
        cache: !0,
        timeout: 1e4,
        success: function(t) {
            t.sort(function(t, i) { return t.order > i.order ? 1 : i.order > t.order ? -1 : 0 }), groupsJSON = t, $.each(t, function() {
                var t = '<option value="' + this.id + '">' + this.name + "</option>";
                $("#achievementGroups").append(t)
            })
        },
        error: function() {}
    }), $.ajax({ type: "GET", url: "https://api.guildwars2.com/v2/achievements/categories?ids=all", dataType: "json", cache: !0, timeout: 1e4, success: function(t) { t.sort(function(t, i) { return t.order > i.order ? 1 : i.order > t.order ? -1 : 0 }), categoriesJSON = t }, error: function() {} }), $.ajax({ type: "GET", url: "https://api.guildwars2.com/v2/account/achievements?access_token=" + key, dataType: "json", cache: !1, timeout: 1e4, success: function(t) { $.each(t, function() { accountAchievementsJSON = t }) }, error: function() {} })).then(function() { $("#achievementGroups").trigger("change") })
}

function getAchievementGroupCategories(t) {
    $("#achievementCategories").html("");
    var i;
    $.each(groupsJSON, function() { this.id == t && (i = this.categories) }), $.each(categoriesJSON, function() {
        if (-1 != i.indexOf(this.id) && this.achievements.length) {
            var t = '<option value="' + this.id + '">' + this.name + "</option>";
            $("#achievementCategories").append(t)
        }
    }), $("#achievementCategories").trigger("change")
}

function getCategoryAchievements(t) {
    $(".achievement-container").html("");
    var i, s;
    if ($.each(categoriesJSON, function() { this.id == t && (i = this.achievements, s = this.icon) }), i.length) {
        var a = i.join(","),
            e = $("#itemLinks").val();
        achievementsArray = [], $.ajax({
            type: "GET",
            url: "https://api.guildwars2.com/v2/achievements?ids=" + a,
            dataType: "json",
            cache: !0,
            timeout: 1e4,
            success: function(t) {
                var a = [],
                    n = [],
                    r = [];
                $.each(t, function() {
                    var t, i = this.tiers.length - 1,
                        o = Number(this.tiers[i].count).toLocaleString(),
                        d = 0;
                    this.tiers.length > 0 && $.each(this.tiers, function() { d += this.points }), t = -1 != this.requirement.indexOf("  ") ? this.requirement.split("  ")[0] + " " + o + " " + this.requirement.split("  ")[1] : -1 != this.requirement.indexOf(" / ") ? this.requirement.split(" / ")[0] + " " + o + " " + this.requirement.split(" / ")[1] : -1 != this.requirement.indexOf(": /") ? this.requirement.split(": /")[0] + ": " + o + " " + this.requirement.split(": /")[1] : this.requirement, achievementsArray.push(this);
                    var c = '<div data-achievement-id="' + this.id + '">';
                    c += '<div class="progress"><img data-src="' + s + '"></div>', c += '<div class="details">', c += "<h4>" + this.name + "</h4>", c += '<p class="requirement">' + t + "</p>", c += '<p class="description"><em>' + this.description + "</em></p>", c += '<div class="rewards">', d > 0 && (c += '<div class="reward points"><img data-src="assets/img/achievement-points.png">0/' + d + "</div>"), this.rewards && $.each(this.rewards, function() { "Title" == this.type ? (a.push(this.id), c += '<div class="reward title"><img data-src="assets/img/title-icon.png"> <span data-title-id="' + this.id + '"></span></div>') : "Coins" == this.type ? c += '<div class="reward coins">' + priceFormat(this.count) + "</div>" : "Mastery" == this.type ? c += '<div class="reward mastery"><img data-src="assets/img/' + this.region + '-mastery.png"></div>' : "Item" == this.type ? (n.push(this.id), c += '<a href="' + e + this.id + '" target="_blank" class="reward item" data-itemid="' + this.id + '"><img src="assets/img/gw2-logo.png"></a>') : "Skin" == this.type && (r.push(this.id), c += '<a class="reward item skin" data-itemid="' + this.id + '">Skin: ' + this.id + "</a>") }), c += "</div>", c += "</div>", c += "</div>", $(".achievement-container").append(c)
                }), getAccountAchievements(i), a.length && getAchievementTitles(a), n.length && getBankItemDetails(n)
            },
            error: function() {}
        })
    }
}

function getAccountAchievements(t) {
    $.each(accountAchievementsJSON, function() {
        if (-1 != t.indexOf(this.id)) {
            var i = this.id,
                s = $('.achievement-container div[data-achievement-id="' + this.id + '"]'),
                a = this.current,
                e = 1,
                n = 0,
                r = 0,
                o = 0,
                d = Number(this.current).toLocaleString(),
                c = Number(this.max).toLocaleString();
            if (this.max > 1 && s.find(".progress").append('<p class="amount-done">' + d + "/" + c + "</p>"), $.each(achievementsArray, function() { this.id == i && (n = this.tiers.length) > 0 && $.each(this.tiers, function() { a >= this.count && (r += this.points, e++), o += this.points }) }), n > 1 && (e > n && (e = n), s.find(".progress").prepend('<div class="tiers-done">Tier ' + e + "/" + n + "</div>")), o > 0 && s.find(".points").html('<img data-src="assets/img/achievement-points.png">' + r + "/" + o), this.done) s.addClass("done"), s.find(".progress").append("Complete");
            else {
                var l = Number(this.current / this.max * 100).toFixed(2),
                    h = parseInt(100 - this.current / this.max * 100),
                    p = "linear-gradient(to bottom, transparent " + h + "%, #fff " + h + "%)";
                s.find(".progress").css("background", p), s.find(".progress").append(l + "%")
            }
        }
    })
}

function getAchievementTitles(t) { $.ajax({ type: "GET", url: "https://api.guildwars2.com/v2/titles?lang=fr&ids=" + t, dataType: "json", cache: !0, timeout: 1e4, success: function(t) { $.each(t, function() { $('.achievement-container span[data-title-id="' + this.id + '"]').html(this.name) }) }, error: function() {} }) }
var key = "",
    accountName, worldId, worldName, error = !1,
    i = 0;
$(document).ajaxStop(function(t) {
    if ($("#keySubmit").removeClass("shift").removeAttr("disabled"), 1 == error) $(".settings .error").show(), $("#apiKey").addClass("error").removeClass("success"), $("#loader").removeClass("visible");
    else {
        0 == i && (i++, $("#settings").removeClass("visible")), $(".intro").hide(), $("#apiKey").removeClass("error").addClass("success"), lazyLoad();
        var s = $("section.visible, section.loading").attr("id"),
            a = s;
        if ("characters" == s) var a = $(".char-details > div.visible").attr("id");
        if (s) {
            var e = 0,
                n = 0,
                r = 0;
            $("#" + a + " .item:not(.small):not(.trait):not(.empty)").each(function() {
                var t = $(this),
                    i = t.attr("data-name"),
                    s = t.attr("data-quantity"),
                    a = t.attr("data-vendorprice"),
                    o = t.attr("data-buyprice"),
                    d = t.attr("data-sellprice"),
                    c = t.attr("data-flags"),
                    l = t.attr("data-upgrade1-vendor"),
                    h = t.attr("data-upgrade2-vendor"),
                    p = t.attr("data-upgrade1-buyprice"),
                    u = t.attr("data-upgrade2-buyprice"),
                    m = t.attr("data-upgrade1-sellprice"),
                    v = t.attr("data-upgrade2-sellprice"),
                    g = t.attr("data-upgrade1-flags"),
                    f = t.attr("data-upgrade2-flags");
                i || (i = "Not Found"), s || (s = 1), a || (a = 0), o || (o = 0), d || (d = 0), c || (c = ""), -1 == c.indexOf("NoSell") && (e += s * a), t.hasClass("value-exclude") || -1 != c.indexOf("AccountBindOnUse") || -1 != c.indexOf("AccountBound") || -1 != c.indexOf("SoulbindOnAcquire") || (n += s * o, r += s * d), t.hasClass("value-exclude") && -1 == c.indexOf("NoSalvage") && (l && -1 == g.indexOf("NoSell") && (e += parseInt(l)), h && -1 == f.indexOf("NoSell") && (e += parseInt(h)), p && -1 == g.indexOf("AccountBindOnUse") && -1 == g.indexOf("AccountBound") && -1 == g.indexOf("SoulbindOnAcquire") && (n += parseInt(p), r += parseInt(m)), u && -1 == f.indexOf("AccountBindOnUse") && -1 == f.indexOf("AccountBound") && -1 == f.indexOf("SoulbindOnAcquire") && (n += parseInt(u), r += parseInt(v)))
            }), $("#" + s + " .total-vendor").html(priceFormat(e)), $("#" + s + " .total-buy").html(priceFormat(n)), $("#" + s + " .total-sell").html(priceFormat(r))
        }
        setTimeout(function() { $("#loader").removeClass("visible"), $("section.loading").addClass("visible").removeClass("loading"), $(".refreshTrades").removeClass("spin") }, 300)
    }
}), $(document).ready(function() {
    applyCookies();
    var t;
    $("body").on("keydown", "#apiKey", function(i) { t = $(this).val().length }), $("body").on("keyup", "#apiKey", function(i) {
        var s = $(this).val();
        s = s.split(" ").join(""), 16 != i.keyCode && 17 != i.keyCode && s.length != t && keyCheck(s)
    }), $("body").on("click", "#keySubmit", function(t) {
        if ("disabled" != $(this).attr("disabled")) {
            var i = $("#apiKey").val();
            i = i.split(" ").join(""), keyCheck(i)
        }
        return !1
    }), $("body").on("click", ".page-left", function() {
        var t = $(this).siblings(".time").val(),
            i = $(this).siblings(".type").val(),
            s = "transactionHistory";
        "current" == t && (s = "currentTransactions");
        var a = $(this).siblings(".page"),
            e = Number(a.html());
        e -= 2;
        var n = "https://api.guildwars2.com/v2/commerce/transactions/" + t + "/" + i + "?page=" + e + "&page_size=20&access_token=" + key;
        return e >= 0 && (a.html(e + 1), $("#" + s + " ." + i + " tbody").html(""), handlePage(n, s, i)), !1
    }), $("body").on("click", ".page-right", function() {
        var t = $(this).siblings(".time").val(),
            i = $(this).siblings(".type").val(),
            s = Number($(this).siblings(".total").html()),
            a = "transactionHistory";
        "current" == t && (a = "currentTransactions");
        var e = $(this).siblings(".page"),
            n = Number(e.html()),
            r = "https://api.guildwars2.com/v2/commerce/transactions/" + t + "/" + i + "?page=" + n + "&page_size=20&access_token=" + key;
        return n + 1 <= s && (e.html(n + 1), $("#" + a + " ." + i + " tbody").html(""), handlePage(r, a, i)), !1
    }), $("body").on("click", ".first-page", function() {
        var t = $(this).siblings(".time").val(),
            i = $(this).siblings(".type").val(),
            s = "transactionHistory";
        "current" == t && (s = "currentTransactions");
        var a = $(this).siblings(".page"),
            e = Number(a.html()),
            n = "https://api.guildwars2.com/v2/commerce/transactions/" + t + "/" + i + "?page=0&page_size=20&access_token=" + key;
        return e > 1 && (a.html(1), $("#" + s + " ." + i + " tbody").html(""), handlePage(n, s, i)), !1
    }), $("body").on("click", ".last-page", function() {
        var t = $(this).siblings(".time").val(),
            i = $(this).siblings(".type").val(),
            s = Number($(this).siblings(".total").html()),
            a = "transactionHistory";
        "current" == t && (a = "currentTransactions");
        var e = $(this).siblings(".page"),
            n = Number(e.html()),
            r = s - 1,
            o = "https://api.guildwars2.com/v2/commerce/transactions/" + t + "/" + i + "?page=" + r + "&page_size=20&access_token=" + key;
        return n < s && (e.html(s), $("#" + a + " ." + i + " tbody").html(""), handlePage(o, a, i)), !1
    }), $("body").on("click", ".refreshTrades", function() { return $("#currentTransactions tbody").html(""), $("#currentTransactions .page").html("1"), $("#transactionHistory tbody").html(""), $("#transactionHistory .page").html("1"), $(".refreshTrades").addClass("spin"), getCurrentTransactions(), getTransactionHistory(), !1 }), $("body").on("change", "#itemLinks", function() {
        var t = $(this).val();
        $("a.item, .item a").each(function() {
            var i = $(this).attr("data-itemid");
            $(this).attr("href", t + i)
        }), $("table a").each(function() {
            var i = $(this).parents("tr").attr("data-itemid");
            $(this).attr("href", t + i)
        }), createCookie("itemLinks", t, 365)
    }), $("body").on("click", "#showSettings", function() { return $("#settings").toggleClass("visible"), !1 }), $("html").on("click", "#mainNav a", function() {
        if (!$(this).hasClass("selected")) {
            $("#mainMenu").removeClass("open");
            var t = $(this).attr("data-id");
            window.ga && ga("send", "pageview", { page: t, title: t }), $(this).addClass("selected").siblings().removeClass("selected"), $("section.visible").addClass("closing"), $("#" + t).addClass("loading").siblings().removeClass("visible"), $("#loader").addClass("visible"), setTimeout(function() { $("section.closing").removeClass("closing"), $("section.visible").addClass("closing"), $("#guilds .flex-container").html(""), $("#characters .char-details, #charList").html(""), $("#bank > div.item-list").html(""), $("#collectibles > div.item-list").html(""), $("#currentTransactions tbody").html(""), $("#transactionHistory tbody").html(""), $("#wallet > div").html(""), $("#unlocks .subtabs > div").html(""), $("#pvp .subtabs > div").html(""), $(".table-overflow").css("min-height", "0px"), "characters" == t ? getCharacters() : "guilds" == t ? getGuilds(guilds) : "bank" == t ? getBank() : "collectibles" == t ? getCollectibles() : "tradingPost" == t ? (getCurrentTransactions(), getTransactionHistory()) : "wallet" == t ? getWallet() : "unlocks" == t ? getUnlocks() : "pvp" == t ? getPvp() : "achievements" == t && getAchievements(), createCookie("startTab", t, 365) }, 500)
        }
        return !1
    }), $("body").on("change", "#charList", function() {
        var t = $(this).val();
        createCookie("startChar", t, 365);
        var i = [],
            s = [];
        $("#" + t + " .item").each(function() {
            var t = $(this),
                a = t.attr("data-itemid");
            if (-1 == $.inArray(a, i) && i.push(a), t.attr("data-upgrade1")) {
                var e = t.attr("data-upgrade1");
                parseInt(e) && -1 == $.inArray(e, i) && i.push(e)
            }
            if (t.attr("data-upgrade2")) {
                var e = t.attr("data-upgrade2");
                parseInt(e) && -1 == $.inArray(e, i) && i.push(e)
            }
            if (t.attr("data-infusion1")) {
                var n = t.attr("data-infusion1");
                parseInt(n) && -1 == $.inArray(n, i) && i.push(n)
            }
            if (t.attr("data-infusion2")) {
                var e = t.attr("data-infusion2");
                parseInt(n) && -1 == $.inArray(n, i) && i.push(n)
            }
            if (t.attr("data-skin")) {
                var r = t.attr("data-skin");
                parseInt(r) && -1 == $.inArray(r, s) && s.push(r)
            }
        });
        var a = $("#" + t);
        return a.siblings().removeClass("visible"), setTimeout(function() {
            if (i.length) {
                var t = i.length + 1,
                    e = Math.ceil(t / 200),
                    n = [];
                for (x = 0; x < e; x++) n[x] = [];
                var r = 0;
                $.each(i, function() {
                    var t = Math.floor(r / 200),
                        i = this.toString();
                    n[t].push(i), r++
                });
                var r = 0;
                $.each(n, function() { getBankItemDetails(n[r], s), getPrices(n[r]), r++ })
            }
            a.siblings().addClass("collapsed"), a.removeClass("collapsed").addClass("visible")
        }, 300), !1
    }), $("body").on("click", ".subtabs nav a", function() {
        var t = $(this);
        if (!t.hasClass("selected")) {
            var i = $(this).attr("data-class");
            t.addClass("selected").siblings().removeClass("selected"), t.parent().siblings().removeClass("visible"), lazyLoad(), setTimeout(function() { t.parent().siblings().addClass("collapsed"), t.parent().siblings("." + i).removeClass("collapsed").addClass("visible") }, 300)
        }
        return !1
    });
    var i;
    $("body").on("mouseenter", ".specialization .trait", function() {
        var t = $(this),
            s = $(this).attr("data-traitid");
        return i = $.ajax({
            type: "GET",
            url: "https://api.guildwars2.com/v2/traits/" + s,
            dataType: "json",
            cache: !0,
            timeout: 1e4,
            success: function(i) {
                if ($("#traitDetails .trait-name").html(i.name), $("#traitDetails .description").html(i.description), i.skills) {
                    var s = 0,
                        a = "",
                        e = "";
                    $.each(i.skills, function() { a += '<div class="flex-container">', e += '<div class="skill-details">', e += '<div class="skill-name">', this.icon && (this.prefix && (a += '<div class="icon"><img src="' + this.prefix.icon + '"></div>'), a += '<div class="icon"><img src="' + this.icon + '">', this.apply_count && this.apply_count > 1 && (a += '<span class="intensity">' + this.apply_count + "</span>"), a += "</div>", e += '<img src="' + this.icon + '"> '), a += this.name, e += this.name, e += "</div>", e += '<div class="description">' + this.description + "</div>", this.facts && $.each(this.facts, function() { e += '<div class="flex-container">', this.icon && "Recharge" != this.type && (this.prefix && (e += '<div class="icon"><img src="' + this.prefix.icon + '"></div>'), e += '<div class="icon"><img src="' + this.icon + '">', this.apply_count && this.apply_count > 1 && (e += '<span class="intensity">' + this.apply_count + "</span>"), e += "</div>"), "AttributeAdjust" == this.type ? this.text ? e += this.text + ": +" + this.value : e += this.target + ": +" + this.value : "Buff" == this.type ? this.duration ? e += '<div class="details">' + this.status + " (" + this.duration + "s): " + this.description + "</div>" : 0 == this.duration ? e += '<div class="details">' + this.status + ": " + this.description + "</div>" : e += '<div class="details">Removes ' + this.status + "</div>" : "BuffConversion" == this.type ? e += '<div class="details">Gain ' + this.target + " Based on a Percentage of " + this.source + ": " + this.percent + "%</div>" : "ComboField" == this.type ? e += this.text + ": " + this.field_type : "ComboFinisher" == this.type ? e += this.text + ": " + this.finisher_type + " (" + this.percent + "%)" : "Damage" == this.type ? e += '<div class="details">' + this.text + ": " + this.hit_count + " hit(s)</div>" : "Distance" == this.type || "Radius" == this.type ? e += this.text + ": " + this.distance : "NoData" == this.type || "Unblockable" == this.type ? e += this.text : "Number" == this.type || "Range" == this.type ? e += this.text + ": " + this.value : "Percent" == this.type ? e += this.text + ": " + this.percent + "%" : "PrefixedBuff" == this.type ? e += '<div class="details short">' + this.status + " (" + this.duration + "s): " + this.description + "</div>" : "Recharge" == this.type ? (e += '<div class="recharge">', e += this.value + '<i class="material-icons">refresh</i>', e += "</div>") : "Time" == this.type && (e += '<div class="details">' + this.text + ": " + this.duration + " seconds</div>"), e += "</div>" }), a += "</div>", e += "</div>", s++ }), s > 1 && (e += '<small>Click to Cycle Skills (<span class="skill-index">1</span> of <span class="total-skills">' + s + "</span>)</small>"), $("#traitDetails .skills").html(a), $("#traitDetails #skillDetails").html(e), $("#traitDetails #skillDetails .skill-details:first").addClass("visible")
                } else $("#traitDetails .skills").html(""), $("#traitDetails #skillDetails").html("");
                if (i.facts) {
                    var n = "";
                    $.each(i.facts, function() { n += '<div class="flex-container">', this.icon && "Recharge" != this.type && (this.prefix && (n += '<div class="icon"><img src="' + this.prefix.icon + '"></div>'), n += '<div class="icon"><img src="' + this.icon + '">', this.apply_count && this.apply_count > 1 && (n += '<span class="intensity">' + this.apply_count + "</span>"), n += "</div>"), "AttributeAdjust" == this.type ? this.text ? n += this.text + ": +" + this.value : n += this.target + ": +" + this.value : "Buff" == this.type ? this.duration ? n += '<div class="details">' + this.status + " (" + this.duration + "s): " + this.description + "</div>" : 0 == this.duration ? n += '<div class="details">' + this.status + ": " + this.description + "</div>" : n += '<div class="details">Removes ' + this.status + "</div>" : "BuffConversion" == this.type ? n += '<div class="details">Gain ' + this.target + " Based on a Percentage of " + this.source + ": " + this.percent + "%</div>" : "ComboField" == this.type ? n += this.text + ": " + this.field_type : "ComboFinisher" == this.type ? n += this.text + ": " + this.finisher_type + " (" + this.percent + "%)" : "Damage" == this.type ? n += this.text + ": " + this.hit_count + " hit(s)" : "Distance" == this.type || "Radius" == this.type ? n += this.text + ": " + this.distance : "NoData" == this.type || "Unblockable" == this.type ? n += this.text : "Number" == this.type || "Range" == this.type ? n += this.text + ": " + this.value : "Percent" == this.type ? n += this.text + ": " + this.percent + "%" : "PrefixedBuff" == this.type ? n += '<div class="details short">' + this.status + " (" + this.duration + "s): " + this.description + "</div>" : "Recharge" == this.type ? (n += '<div class="recharge">', n += this.value + '<i class="material-icons">refresh</i>', n += "</div>") : "Time" == this.type && (n += this.text + ": " + this.duration + " seconds"), n += "</div>" }), $("#traitDetails .facts").html(n)
                } else $("#traitDetails .facts").html("");
                var r = $(window).scrollTop(),
                    o = $(window).width(),
                    d = $(window).height(),
                    c = $("#traitDetails").outerHeight(),
                    l = $("#traitDetails").outerWidth(),
                    h = t.offset().left,
                    p = t.offset().top,
                    u = t.find("img").outerWidth(),
                    m = t.find("img").outerWidth();
                p > r + d / 2 ? (h > o / 2 ? ($("#traitDetails").css("top", p - .8 * c + m).css("left", h - l - 5), $("#skillDetails").addClass("left")) : ($("#traitDetails").css("top", p - .8 * c + m).css("left", h + u + 5), $("#skillDetails").removeClass("left")), $("#skillDetails").addClass("bottom")) : (h > o / 2 ? ($("#traitDetails").css("top", p - .2 * c).css("left", h - l - 5), $("#skillDetails").addClass("left")) : ($("#traitDetails").css("top", p - .2 * c).css("left", h + u + 5), $("#skillDetails").removeClass("left")), $("#skillDetails").removeClass("bottom")), $("#traitDetails").addClass("visible")
            },
            error: function() {}
        }), !1
    }), $("body").on("mouseleave", ".specialization .trait", function() { return i.abort(), $("#traitDetails").removeClass("visible"), !1 }), $("body").on("click", ".specialization .trait", function() {
        var t = $(".skill-details.visible"),
            i = t.next(".skill-details");
        return t.length > 0 && (i.length > 0 ? (i.addClass("visible").siblings().removeClass("visible"), $(".skill-index").html(i.index() + 1)) : (t.siblings(":first").addClass("visible").siblings().removeClass("visible"), $(".skill-index").html(1))), !1
    }), $("body").on("click", ".item", function(t) {
        var i = $(this).attr("data-itemid"),
            s = $("#itemDetails").attr("data-itemid");
        $("#itemDetails").hasClass("skin") ? $("#itemDetails").hasClass("open") || t.preventDefault() : $("#itemDetails").hasClass("open") && i == s || t.preventDefault()
    }), $("body").on("mouseenter", "a.item, .item a", function() {
        var t, i = $(this);
        t = $(this).parents(".item").length ? $(this).parents(".item") : $(this);
        var s = t.attr("data-name");
        if (s) {
            var a = t.attr("data-itemid"),
                e = t.attr("href"),
                n = t.attr("data-quantity"),
                r = t.attr("data-origname"),
                o = t.attr("data-skin"),
                d = t.find("img").attr("src");
            t.hasClass("dye") && (d = t.attr("data-icon"));
            var c = t.attr("data-description"),
                l = t.attr("data-type"),
                h = t.attr("data-level"),
                p = t.attr("data-rarity"),
                u = t.attr("data-detailstype"),
                m = t.attr("data-minpower"),
                v = t.attr("data-maxpower"),
                g = t.attr("data-defense"),
                f = t.attr("data-buff"),
                y = t.attr("data-stat1"),
                b = t.attr("data-stat2"),
                k = t.attr("data-stat3"),
                w = t.attr("data-stat4"),
                x = t.attr("data-stat5"),
                C = t.attr("data-stat6"),
                T = t.attr("data-stat7"),
                D = t.attr("data-bonus1"),
                _ = t.attr("data-bonus2"),
                j = t.attr("data-bonus3"),
                A = t.attr("data-bonus4"),
                S = t.attr("data-bonus5"),
                q = t.attr("data-bonus6"),
                G = t.attr("data-upgrade1-html"),
                I = t.attr("data-upgrade2-html"),
                N = t.attr("data-infusion1-html"),
                M = t.attr("data-infusion2-html"),
                P = t.attr("data-vendorprice"),
                F = t.attr("data-buyprice"),
                E = t.attr("data-sellprice"),
                L = t.attr("data-flags");
            if (n || (n = 1), s = n > 1 ? '<span class="' + p + '">' + n + " " + s + "</span>" : '<span class="' + p + '">' + s + "</span>", $("#itemDetails .link a").attr("href", e).html(e), $("#itemDetails .icon-name img").attr("src", d), $("#itemDetails .item-name").html(s), $("#itemDetails .rarity").html(p), $("#itemDetails .type").html(u), (P > 0 || F || E) && (-1 == L.indexOf("NoSell") || F) ? (P > 0 && -1 == L.indexOf("NoSell") ? (P = n > 1 ? priceFormat(P * n) + " &nbsp;/&nbsp; (" + priceFormat(P) + ")" : priceFormat(P), $("#itemDetails .vendor span").html(P), $("#itemDetails .vendor").show()) : $("#itemDetails .vendor").hide(), F && -1 == L.indexOf("AccountBindOnUse") && -1 == L.indexOf("AccountBound") && -1 == L.indexOf("SoulbindOnAcquire") ? (n > 1 ? (F = priceFormat(F * n) + " &nbsp;/&nbsp; (" + priceFormat(F) + ")", E = priceFormat(E * n) + " &nbsp;/&nbsp; (" + priceFormat(E) + ")") : (F = priceFormat(F), E = priceFormat(E)), $("#itemDetails .tp-buy span").html(F), $("#itemDetails .tp-sell span").html(E), $("#itemDetails .tp-buy, #itemDetails .tp-sell").show()) : $("#itemDetails .tp-buy, #itemDetails .tp-sell").hide(), $("#itemDetails .values").show()) : $("#itemDetails .values").hide(), c ? (c = c.split("<c=@flavor>").join("<span class='flavor'>").split("</c>").join("</span>"), $("#itemDetails .description").html(c), $("#itemDetails .description").show()) : $("#itemDetails .description").hide(), p ? $("#itemDetails .rarity").show() : $("#itemDetails .rarity").hide(), G) {
                G = G.split("<c=@reminder>").join("<span class='reminder'>").split("</c>").join("</span>");
                var B = G;
                I && (I = I.split("<c=@reminder>").join("<span class='reminder'>").split("</c>").join("</span>"), B += "<br>" + I), $("#itemDetails .upgrades").html(B), $("#itemDetails .upgrades").show()
            } else $("#itemDetails .upgrades").hide();
            if (N) {
                N = N.split("<c=@reminder>").join("<span class='reminder'>").split("</c>").join("</span>");
                var O = N;
                M && (M = M.split("<c=@reminder>").join("<span class='reminder'>").split("</c>").join("</span>"), O += "<br>" + M), $("#itemDetails .infusions").html(O), $("#itemDetails .infusions").show()
            } else $("#itemDetails .infusions").hide();
            u ? ($("#itemDetails .type").html(u), $("#itemDetails .type").show()) : $("#itemDetails .type").hide(), y ? ($("#itemDetails .stats span").html(""), $("#itemDetails .stat1").html(y), $("#itemDetails .stat2").html(b), $("#itemDetails .stat3").html(k), $("#itemDetails .stat4").html(w), $("#itemDetails .stat5").html(x), $("#itemDetails .stat6").html(C), $("#itemDetails .stat7").html(T), $("#itemDetails .stats").show()) : $("#itemDetails .stats").hide(), D ? ($("#itemDetails .bonus1").html(D), $("#itemDetails .bonus2").html(_), j ? ($("#itemDetails .bonus3").html(j), $("#itemDetails .bonus4").html(A)) : ($("#itemDetails .bonus3").html(""), $("#itemDetails .bonus4").html(""), $("#itemDetails .bonus5").html(""), $("#itemDetails .bonus6").html("")), S ? ($("#itemDetails .bonus5").html(S), $("#itemDetails .bonus6").html(q)) : ($("#itemDetails .bonus5").html(""), $("#itemDetails .bonus6").html("")), $("#itemDetails .bonuses").show()) : $("#itemDetails .bonuses").hide(), "Weapon" == l ? ($("#itemDetails .Weapon").show(), $("#itemDetails .Armor").hide(), $("#itemDetails .min").html(m), $("#itemDetails .max").html(v)) : "Armor" == l ? ($("#itemDetails .Weapon").hide(), $("#itemDetails .Armor").show(), $("#itemDetails .defense").html(g)) : ($("#itemDetails .Weapon").hide(), $("#itemDetails .Armor").hide()), o && r ? ($("#itemDetails .transmuted").show(), $("#itemDetails .original-item").html(r)) : $("#itemDetails .transmuted").hide(), f ? ($("#itemDetails .buff").show(), f = f.split("<c=@reminder>").join("<span class='reminder'>").split("</c>").join("</span>"), f = f.replace(/\n/g, "<br>"), $("#itemDetails .buff").html(f)) : $("#itemDetails .buff").hide(), h > 0 ? ($("#itemDetails .level-box").show(), $("#itemDetails .level").html(h)) : $("#itemDetails .level-box").hide();
            var W = $(window).scrollTop(),
                z = $(window).width(),
                R = $(window).height(),
                H = $("#itemDetails").outerHeight(),
                K = $("#itemDetails").outerWidth(),
                U = i.offset().left,
                J = i.offset().top,
                X = i.outerWidth(),
                Q = i.outerWidth();
            if (t.hasClass("skin") || t.hasClass("trait")) {
                var X = t.outerWidth(),
                    Q = t.outerWidth();
                t.hasClass("skin") && $("#itemDetails").addClass("skin"), t.hasClass("trait") && $("#itemDetails").addClass("trait"), U > z / 2 ? $("#itemDetails").css("top", J).css("left", U - K) : $("#itemDetails").css("top", J).css("left", U + X)
            } else $("#itemDetails").removeClass("skin"), $("#itemDetails").removeClass("trait"), J > W + R / 2 ? U > z / 2 ? $("#itemDetails").css("top", J - .8 * H + Q).css("left", U - K - 5) : $("#itemDetails").css("top", J - .8 * H + Q).css("left", U + X + 5) : U > z / 2 ? $("#itemDetails").css("top", J - .2 * H).css("left", U - K - 5) : $("#itemDetails").css("top", J - .2 * H).css("left", U + X + 5);
            setTimeout(function() { $("#itemDetails").addClass("visible").removeClass("open"), $("#itemDetails").attr("data-itemid", a) }, 1), setTimeout(function() { $("#itemDetails").addClass("open").addClass("above") }, 2)
        }
    }), $("body").on("click", "#itemDetails .close", function() { return $("#itemDetails").removeClass("visible"), setTimeout(function() { $("#itemDetails").removeClass("above").removeClass("open") }, 1), !1 }), $("body").on("mouseleave", ".item", function() { $("#itemDetails").removeClass("visible"), setTimeout(function() { $("#itemDetails").removeClass("above").removeClass("open") }, 1) }), $("body").on("click", "#showMenu", function() { return $("body > aside").addClass("open"), !1 }), $("body").on("click", "#hideMenu", function() { return $("body > aside").removeClass("open"), !1 })
});
var guilds;
String.prototype.capitalizeFirstLetter = function() { return this.charAt(0).toUpperCase() + this.slice(1) }, jQuery.fn.reverse = [].reverse;
var createCookie = function(t, i, s) {
    var a;
    if (s) {
        var e = new Date;
        e.setTime(e.getTime() + 24 * s * 60 * 60 * 1e3), a = "; expires=" + e.toGMTString()
    } else a = "";
    document.cookie = t + "=" + i + a + "; path=/"
};
$(window).scroll(function() { lazyLoad() });
var groupsJSON, categoriesJSON, accountAchievementsJSON, achievementsArray = [];
$("body").on("change", "#achievementGroups", function() { getAchievementGroupCategories($(this).val()) }), $("body").on("change", "#achievementCategories", function() { getCategoryAchievements($(this).val()) }), $("body").on("click", ".jq-collapse-achievements", function() { return $(this).toggleClass("collapsed"), $(".achievement-container").toggleClass("collapsed"), !1 });
